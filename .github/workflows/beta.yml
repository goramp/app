name: CI
on:
  push:
    branches:
      - beta
jobs:
  build_solana_web_client:
    name: Build Solana Client
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Install Dependencies
        run: |
          cd packages/solana-web-client
          npm install
          npm run build
      - name: Archive Solana Web Artifact
        uses: actions/upload-artifact@master
        with:
          name: solana-web-client-build
          path: packages/solana-web-client/lib
  build_web:
    name: Build Flutter (Web)
    runs-on: ubuntu-latest
    needs: build_solana_web_client
    steps:
    - uses: actions/checkout@v1
    - uses: subosito/flutter-action@master
      with:
          channel: 'master'
    - run: git config --global url."https://${{ secrets.GIT_USER }}:${{ secrets.GIT_TOKEN }}@github.com/".insteadOf https://github.com/
    - name: Configure flutter
      run: |
          cd packages/app
          flutter pub get
          flutter config --enable-web
    - name: Run dart env
      run: cd packages/app && dart tool/env.dart
      env:
          WIREDASH_DASH_SECRET: ${{ secrets.PROD_WIREDASH_DASH_SECRET }}
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          VAPID_KEY: ${{ secrets.PROD_VAPID_KEY }}
          DSN: ${{ secrets.WEB_DSN }}
          PASSBASE_API_KEY: ${{ secrets.PROD_PASSBASE_API_KEY }} 
          TRANSACK_API_KEY: ${{ secrets.PROD_TRANSACK_API_KEY }}
          FIREBASE_API_KEY: ${{ secrets.PROD_FIREBASE_API_KEY }}
          SENTRY_RELEASE_NAME: ${{ github.run_id }}-${{ github.run_number }}-prod 
          RECAPTCHA_V3: ${{ secrets.KUROBI_BETA_RECAPTCHA_V3 }}
          RAMP_API_KEY: ${{ secrets.PROD_RAMP_API_KEY }}
          CONFIG_FILE_NAME: tool/beta.env
    - name: Run Web env
      run: |
            . packages/app/parse-tmp-env.sh ./packages/app/web/index.example.html ./packages/app/web/index.html
            . packages/app/parse-tmp-env.sh ./packages/app/web/manifest.example.json ./packages/app/web/manifest.json
            . packages/app/parse-tmp-env.sh ./packages/app/web/firebase-messaging-sw.example.js ./packages/app/web/firebase-messaging-sw.js
      env:
          APP_NAME: Kurobi
          APP_TITLE: Monetize your time
          APP_DESCRIPTION: Accept 1:1 call bookings, sell NFT Tickets for live events and get paid in crypto or cash
          APP_BACKGROUND_COLOR: "#141927"
          APP_THEME_LIGHT_COLOR: "#ffffff"
          APP_THEME_DARK_COLOR: "#2a2a2a"
          APP_ICON_SVG: icons/kurobi.svg
          APP_ICON_MASKABLE_PNG_512: icons/kurobi-maskable-512.png    
          APP_ICON_MASKABLE_PNG_192: icons/kurobi-maskable-192.png
          APP_ICON_PNG_512: icons/kurobi-512.png
          APP_ICON_PNG_192: icons/kurobi-192.png
          APP_SHORT_NAME: Kurobi - Monetize your time
          FIREBASE_API_KEY: ${{ secrets.PROD_FIREBASE_API_KEY }}
          FIREBASE_PROJECT_ID: kurobi-756d5
          FIREBASE_STORAGE_BUCKET: kurobi-756d5.appspot.com
          FIREBASE_MESSAGING_SENDER_ID: 998807041383
          FIREBASE_APP_ID: 1:998807041383:web:6e79face7c5f6b77ca6bc2
          FIREBASE_MEASUREMENT_ID: G-G1K2VJ5LXV
          FIREBASE_ANDROID_CLIENT_ID: 878753935040-atste69i9q6q5f923f9rsktqt2ppbh92.apps.googleusercontent.com
          FIREBASE_IOS_CLIENT_ID: 878753935040-frv72693bo58e9oak9je8p8ebue1puif.apps.googleusercontent.com
          FIREBASE_AUTH_DOMAIN: kurobi-756d5.firebaseapp.com
          RECAPTCHA_V3: ${{ secrets.KUROBI_BETA_RECAPTCHA_V3 }}
          FACEBOOK_APP_ID: 384554333075061 
          APP_VERSION: ${{ github.run_id }}-${{ github.run_number }}-prod 
    - run: cd packages/app && flutter build web -t lib/main.dart --web-renderer html --source-maps #--web-renderer canvaskit
    #- run: sed -i 's/q.autoplay=!0/q.autoplay=1/g' build/web/main.dart.js
    - name: Download Solana Web Client
      uses: actions/download-artifact@master
      with:
        name: solana-web-client-build
        path: packages/app/build/web/solana-web-client    
    - name: Archive Production Artifact
      uses: actions/upload-artifact@master
      with:
        name: web-build
        path: packages/app/build/web

  # build_ios:
  #   name: Build Flutter (iOS)
  #   runs-on: macos-latest
  #   steps:    
  #   - uses: actions/checkout@v2
  #   - uses: ruby/setup-ruby@v1
  #     with:
  #       ruby-version: '2.7.2' # Not needed with a .ruby-version file
  #       bundler-cache: true # runs 'bundle install' and caches installed gems automatically
  #   - uses: actions/setup-java@v1
  #     with:
  #       java-version: '12.x'
  #   - uses: subosito/flutter-action@v1
  #     with:
  #         channel: 'master'
  #   - name: Select Xcode version
  #     run: sudo xcode-select -s '/Applications/Xcode_12.4.app/Contents/Developer'
  #   - name: Configure plist
  #     env:
  #       GOOGLE_INFO_PLIST: ${{ secrets.PROD_GOOGLE_PLIST }}
  #       INFO_PLIST: ${{ secrets.PROD_INFO_PLIST }}
  #     run: |
  #       echo $GOOGLE_INFO_PLIST > ios/Runner/GoogleService-Info.plist 
  #       echo $INFO_PLIST > ios/Runner/Info.plist
  #       mv ios/Runner/Runner.entitlements.prod ios/Runner/Runner.entitlements
  #   - name: Configure Podfile
  #     run: mv ios/Podfile.example ios/Podfile
  #   - name: Bundle install
  #     run: |
  #         cd ./ios && bundle install
  #   - name: Run git config
  #     run: git config --global url."https://${{ secrets.GIT_USER }}:${{ secrets.GIT_TOKEN }}@github.com/".insteadOf https://github.com/
  #   - name: Install flutter dependencies
  #     run: flutter pub get          
  #   - name: Run dart env
  #     run: dart tool/env.dart
  #     env:
  #         WIREDASH_DASH_SECRET: ${{ secrets.PROD_WIREDASH_DASH_SECRET }}
  #         TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
  #         TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
  #         VAPID_KEY: ${{ secrets.PROD_VAPID_KEY }}
  #         STRIPE_PUBLISH_KEY: ${{ secrets.PROD_STRIPE_PUBLISH_KEY }}
  #         DSN: ${{ secrets.MOBILE_DSN }}
  #         TRANSACK_API_KEY: ${{ secrets.PROD_TRANSACK_API_KEY }}
  #         FIREBASE_API_KEY: ${{ secrets.PROD_FIREBASE_API_KEY }}
  #         SENTRY_RELEASE_NAME: ${{ github.run_id }}-${{ github.run_number }}-beta 
  #         CONFIG_FILE_NAME: tool/beta.env
  #   - name: Pod Install
  #     run: cd ./ios && pod install
  #   - name: Deploy to TestFlight
  #     run: |
  #       cd ./ios && bundle exec fastlane beta
  #     env:
  #       VERSION_CODE: ${{ github.run_number }}
  #       VERSION_NAME: 1.0.0
  #       TEAM_ID: R3Q2RG6HRA
  #       ITC_TEAM_ID: 123434480
  #       FASTLANE_USER: ${{ secrets.FASTLANE_APPLE_USER }}
  #       FASTLANE_PASSWORD: ${{ secrets.FASTLANE_APPLE_PASSWORD }}
  #       FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
  #       FASTLANE_SESSION: ${{ secrets.FASTLANE_APPLE_SESSION }}
  #       FASTLANE_GIT_URL: https://github.com/GotokHQ/kurobi-match
  #       FASTLANE_APP_ID: io.kurobi
  #       MATCH_KEYCHAIN_NAME: login.keychain
  #       MATCH_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
  #       MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
  #       DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS: ${{ secrets.DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS }} 

  build_apk: 
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.2' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Setup flutter
        uses: subosito/flutter-action@master
        with:
          channel: 'master'
      - name: Output Build Name
        uses: satackey/action-js-inline@release-master
        id: getTag
        with:
          script: |
            const core = require('@actions/core')
            // get tag
            const ref = process.env.GITHUB_REF // refs/tags/v0.3.1
            const tag = ref.split('/').slice(-1)[0] // refs/tags/0.3.1 â†’ v0.3.1
            let buildName = tag
            if (tag.startsWith("v")) {
              buildName = tag.substring(1);
            }
            core.setOutput('tagName', tag)
            core.setOutput('buildName', buildName)
      - name: Run git config
        run: git config --global url."https://${{ secrets.GIT_USER }}:${{ secrets.GIT_TOKEN }}@github.com/".insteadOf https://github.com/
      - name: Install flutter dependencies
        run: cd packages/app && flutter pub get
      - name: Run dart env
        run: cd packages/app && dart tool/env.dart
        env:
            WIREDASH_DASH_SECRET: ${{ secrets.PROD_WIREDASH_DASH_SECRET }}
            TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
            TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
            VAPID_KEY: ${{ secrets.PROD_VAPID_KEY }}
            STRIPE_PUBLISH_KEY: ${{ secrets.PROD_STRIPE_PUBLISH_KEY }}
            DSN: ${{ secrets.MOBILE_DSN }}
            PASSBASE_API_KEY: ${{ secrets.PROD_PASSBASE_API_KEY }} 
            TRANSACK_API_KEY: ${{ secrets.PROD_TRANSACK_API_KEY }}
            FIREBASE_API_KEY: ${{ secrets.PROD_FIREBASE_API_KEY }}
            SENTRY_RELEASE_NAME: ${{ github.run_id }}-${{ github.run_number }}-beta 
            CONFIG_FILE_NAME: tool/beta.env
            RECAPTCHA_V3: ${{ secrets.KUROBI_BETA_RECAPTCHA_V3 }}
            RAMP_API_KEY: ${{ secrets.PROD_RAMP_API_KEY }}
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES: ${{ secrets.PROD_GOOGLE_SERVICES }}
        run: |
            mkdir -p packages/app/android/app/src/beta
            echo $GOOGLE_SERVICES | base64 --decode > packages/app/android/app/src/beta/google-services.json 
      - name: Decode key.properties
        env:
          KEY_PROPERTIES: ${{ secrets.KEY_PROPERTIES }}
        run: |
            mkdir -p packages/app/android
            echo $KEY_PROPERTIES | base64 --decode > packages/app/android/key.properties
      - name: Decode Key Store File
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
            mkdir -p packages/app/android/app
            echo $SIGNING_KEY | base64 --decode > packages/app/android/app/kurobi.keystore
      - name: Run flutter clean  
        run: cd packages/app && flutter clean
      - name: Build APK
        run:  cd packages/app && flutter build apk --release --flavor beta --build-number ${{ github.run_number }}
      - name: Build APP Bundle
        run:  cd packages/app && flutter build appbundle --release --flavor beta --build-number ${{ github.run_number }}
      - name: Upload Apk
        uses: actions/upload-artifact@master
        with:
          name: apk-build   
          path: packages/app/build/app/outputs/apk/beta/release    
      - name: Upload App Bundle
        uses: actions/upload-artifact@master
        with:
          name: appbundle-build
          path: packages/app/build/app/outputs/bundle/betaRelease
      - name: Deploy to PlayStore
        run: |
          cd packages/app/android && bundle install && bundle update fastlane && bundle exec fastlane beta
        env:
          PACKAGE_NAME: io.kurobi
          VERSION_CODE: ${{ github.run_number }}
          VERSION_NAME: ${{ steps.getTag.outputs.buildName }}
          GOOGLE_PLAY_DEVELOPER_KEY: ${{ secrets.GOOGLE_PLAY_DEVELOPER_KEY }}

  deploy_web_aws:
    name: Deploy Web to AWS s3
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: web-build
          path: build/web

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: Deploy static site to S3 bucket
        env:
            S3_BUCKET_NAME: beta-kurobi
            S3_CACHE_MAX_AGE: 31536000
        run: |
          aws s3 sync build/web s3://$S3_BUCKET_NAME --delete
          aws s3 cp s3://$S3_BUCKET_NAME/ s3://$S3_BUCKET_NAME/ --metadata-directive REPLACE \
          --exclude "*" --include "*.jpg" --include "*.gif" --include "*.png" \
          --recursive --cache-control max-age=$S3_CACHE_MAX_AGE
      - name: Invalidate Cloud front distribution
        env:
            CLOUD_FRONT_DISTRIBUTION: ELZA96GJ4X2X1
        run: aws cloudfront create-invalidation --distribution-id $CLOUD_FRONT_DISTRIBUTION --paths "/*"
      - name: Install Sentry cli      
        run: curl -sL https://sentry.io/get-cli/ | bash
      - name: Upload release to sentry
        run: |
            sentry-cli releases new ${{ github.run_id }}-${{ github.run_number }}-beta  
            sentry-cli releases files ${{ github.run_id }}-${{ github.run_number }}-beta  upload-sourcemaps build/web
            sentry-cli releases finalize ${{ github.run_id }}-${{ github.run_number }}-beta 
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN: ${{ secrets.WEB_DSN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }} 
        
 